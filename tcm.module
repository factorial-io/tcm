<?php
/**
 * @file
 * The public api for the theme-component-manager.
 */


/**
 * Helper method to convert an object to an array.
 */
function _object_to_array($obj) {
  if (is_object($obj)) {
    $obj = (array) $obj;
  }
  if (is_array($obj)) {
    $new = array();
    foreach ($obj as $key => $val) {
      $new[$key] = _object_to_array($val);
    }
  }
  else {
    $new = $obj;
  }

  return $new;
}

/**
 * Base class for a component.
 */
class ComponentBase extends StdClass {
  protected $name;
  protected $machineName;
  protected $folder;
  protected $scripts = array();
  protected $styles = array();
  protected $template = FALSE;
  protected $fixture = array();
  protected $options = array();
  protected $variants = array();

  /**
   * Constructor.
   */
  public function __construct($folder, $data) {
    $this->name = $data->name;
    $this->machineName = drupal_html_class($this->name);
    $this->folder = $folder;

    $this->scripts = isset($data->scripts) ? $data->scripts : array();
    $this->styles = isset($data->styles) ? $data->styles : array();

    if (!empty($data->backend)) {
      $this->template = !empty($data->backend->template) ? $data->backend->template : FALSE;
      if (is_array($this->template)) {
        $ext = tcm_get_template_file_extension();
        // find suitable candidate:
        $candidate = FALSE;
        foreach($this->template as $tmpl) {
          if (substr($tmpl, -strlen($ext)) == $ext) {
            $candidate = $tmpl;
          }
        }
        if ($candidate) {
          $this->template = $candidate;
        }
      }
      if (!empty($data->backend->arguments)) {
        drupal_set_message(t('Component %component uses old format, split arguments into fixture and options!', array(
          '%component' => $this->name,
        )), 'error');
      }
      foreach (array('fixture', 'options', 'variants') as $key) {
        if (!empty($data->backend->{$key})) {
          $this->{$key} = _object_to_array($data->backend->{$key});
        }
      }
    }
  }

  /**
   * Get the name of the component.
   */
  public function getName() {
    return $this->name;
  }

  /**
   * Get the machine-name of the component.
   */
  public function getMachineName($with_underscores = FALSE) {
    return $with_underscores ? str_replace('-', '_', $this->machineName) : $this->machineName;
  }

  /**
   * Attach component assets to page.
   */
  public function attachAssets() {
    $mapping = array('drupal_add_js' => $this->scripts, 'drupal_add_css' => $this->styles);
    foreach ($mapping as $func_name => $data) {
      foreach ($data as $script_name) {
        $func_name($this->folder . DIRECTORY_SEPARATOR . $script_name);
      }
    }
  }

  /**
   * Get arguments for this component.
   */
  public function getOptions($options = array()) {
    return drupal_array_merge_deep($this->options, $options);
  }

  /**
   * Get the fixture-data.
   */
  public function getData($data = NULL) {
    return is_null($data) ? $this->fixture : $data;
  }


  /**
   * Get the template.
   */
  public function getTemplate() {
    $pos = strpos($this->template, '.');
    return substr($this->template, 0, $pos);
  }

  /**
   *
   */
  public function hasTemplate() {
    return !empty($this->template);
  }

  /**
   * Get the folder.
   */
  public function getFolder() {
    return $this->folder;
  }

  /**
   * Get variants.
   */
  public function getVariants() {
    return $this->variants;
  }

}

/**
 * Implementation of hook_theme().
 */
function tcm_register_theme_functions($existing, $type, $theme, $path) {

  $components = tcm_get_components($path);
  $result = array();
  if (!$components) {
    return array();
  }

  foreach ($components as $component) {
    if ($component->hasTemplate()) {
      $result['component_' . $component->getMachineName(TRUE)] = array(
        'variables' => array(
          'component' => NULL,
          'data' => NULL,
          'options' => array(),
        ),
        'path' => $component->getFolder(),
        'template' => $component->getTemplate(),
      );
    }
  }

  return $result;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Add the preprocess here to keep defaults.
 */
function tcm_theme_registry_alter(&$theme_registry) {
  foreach ($theme_registry as $name => $item) {
    if (substr($name, 0, 10) == 'component_') {
      array_unshift($theme_registry[$name]['preprocess functions'], 'tcm_preprocess_component');
    }
  }
}

/**
 * Find all components and register them.
 */
function _tcm_register_components(&$components, $dir, $recursive) {

  if (!is_dir($dir)) {
    return array();
  }

  if ($handle = opendir($dir)) {
    while (FALSE !== ($file = readdir($handle))) {
      if ($file[0] == '.') {
        continue;
      }
      $file = $dir . DIRECTORY_SEPARATOR . $file;

      if (is_dir($file)) {
        if ($component = tcm_read_component($file)) {
          // dsm($file, 'found');
          $components[$component->getMachineName()] = $component;
        }
        else {
          if ($recursive) {
            _tcm_register_components($components, $file, $recursive);
          }
          else {
            // dsm("Could not read component from " . $file);
          }
        }
      }
    }
    closedir($handle);
  }
}

/**
 * Find and register all components.
 */
function tcm_register_components() {
  global $theme, $base_theme_info;

  static $components = NULL;
  if (!is_null($components)) {
    return $components;
  }

  $cache_id = 'tcm:components:' . $theme;
  if (!variable_get('devel_rebuild_theme_registry', FALSE) && $data = cache_get($cache_id)) {
    $components = $data->data;
    // dsm("get from cache");
  }
  else {
    $components = array();

    $paths = array_map(function ($info) {
      return drupal_get_path('theme', $info->name);
    }, $base_theme_info);

    $paths [] = path_to_theme();

    foreach ($paths as $path_to_theme) {
      _tcm_register_components($components, $path_to_theme . '/components', TRUE);
      _tcm_register_components($components, $path_to_theme . '/components_local', FALSE);
    }

    cache_set($cache_id, $components);
    // dsm("get from file-system");
  }

  return $components;
}

/**
 * Get all registered components.
 */
function tcm_get_components() {
  return tcm_register_components();
}

/**
 * Read a component.
 */
function tcm_read_component($directory_path) {
  $filename = $directory_path . '/component.json';
  if (!file_exists($filename)) {
    return FALSE;
  }
  $content = file_get_contents($filename);
  $data = json_decode($content);
  if (!empty($data) && is_object($data)) {
    $component = new ComponentBase($directory_path, $data);
    return $component;
  }
  else {
    drupal_set_message(t('Can\t decode component.json at %path', array('%path' => $directory_path)), 'error');
  }
  return FALSE;
}

/**
 * Return a themed component.
 */
function component($component_name, $data = NULL, $options = array()) {
  $components = tcm_get_components();
  if (!isset($components[$component_name])) {
    drupal_set_message(t('Component not found %c', array('%c' => $component_name)));
    $msg = t('missing component %component', array(
      '%component' => $component_name,
    )
    );
    return '<div class="missingComponent">' . $msg . '</div>';
  }

  $component = $components[$component_name];
  if (variable_get('tcm_attach_assets', FALSE)) {
    $component->attachAssets();
  }

  $theme_func = 'component_' . str_replace('-', '_', $component_name);
  return theme($theme_func, array(
    'component' => $component,
    'options' => $options,
    'data' => $data,
  ));
}

/**
 * Get all external fixtures.
 */
function _tcm_get_external_fixture_functions() {
  static $cache = NULL;
  if (is_null($cache)) {
    $cache = array(
      'lorem_ipsum' => 'tcm_fixture_lorem_ipsum',
      'lorem_ipsum_html' => 'tcm_fixture_lorem_ipsum_html',
      'image' => 'tcm_fixture_image',
    );
    drupal_alter('tcm_fixture_functions', $cache);
  }

  return $cache;
}




/**
 * Implementation of hook_preprocess_tcm().
 */
function tcm_preprocess_component(&$variables) {
  $fixture_functions = _tcm_get_external_fixture_functions();
  $component = $variables['component'];
  $options = $component->getOptions($variables['options']);
  $data = $component->getData($variables['data']);

  $variables = drupal_array_merge_deep($variables, $options);
  $variables = drupal_array_merge_deep($variables, $data);

  module_load_include('fixturefunctions.inc', 'tcm');
  array_walk_recursive($variables,
    function(&$elem) use($fixture_functions, $options) {
      _tcm_parse_fixture_function($elem, $fixture_functions, $options);
    }
  );
}

/**
 * Implements hook_menu().
 */
function tcm_menu() {
  return array(
    'admin/components' => array(
      'title' => 'Components',
      'page callback' => 'tcm_page',
      'access arguments' => array('show tcm components'),
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function tcm_permission() {
  return array(
    'show tcm components' => array(
      'title' => t('ow TCM components'),
      'description' => t('Show all TCM components.'),
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function tcm_admin_paths() {
  $paths = array(
    'admin/components' => FALSE,
    'admin/components/*' => FALSE,
  );
  return $paths;
}

/**
 * Render all available variants
 */
function _tcm_render_variants($component, $remaining_variants = array(), $override = array()) {
  drupal_add_css(drupal_get_path('module', 'tcm') . '/tcm-preview.css');

  if (count($remaining_variants) == 0) {
    $prefix  = '<div class="ComponentPreview">';
    $prefix .= '<h1>' . $component->getMachineName() . '</h1>';
    $prefix .= '<code>' . print_r($override, TRUE). '</code>';
    $data = $component->getData();
    $data = drupal_array_merge_deep($data, $override);
    return $prefix . component($component->getMachineName(), $data) . '</div>';
  }
  $key = key($remaining_variants);
  $list = array_shift($remaining_variants);

  $result = '';
  foreach ($list as $item) {
    $new_override = is_array($item) ? $item : array($key => $item);
    $new_override = drupal_array_merge_deep($override, $new_override);
    $result .= _tcm_render_variants($component, $remaining_variants, $new_override);
  }

  return $result;
}

/**
 * Page callback for components-overview and -detail.
 */
function tcm_page($component_name = FALSE) {
  tcm_cache_clear();
  $components = tcm_get_components();

  if ($component_name) {
    if (!isset($components[$component_name])) {
      return MENU_NOT_FOUND;
    }
    $component = $components[$component_name];

    return _tcm_render_variants($component, $component->getVariants());
  }

  $page = array();
  foreach ($components as $component) {
    if (!$component->hasTemplate()) {
      continue;
    }
    $page[] = array(
      array(
        '#prefix' => '<h2>',
        '#suffix' => '</h2>',
        '#markup' => l($component->getName(), 'admin/components/' . $component->getMachineName()),
      ),
      array(
        '#markup' => component($component->getMachineName()),
      ),
    );
  };
  return $page;
}

/**
 * Clear the tcm cache.
 */
function tcm_cache_clear() {
  cache_clear_all('tcm:', 'cache', TRUE);
}


/**
 * Force file extenson for template files
 */
function tcm_force_template_file_extension($file_extension = NULL) {
  static $forced_file_extension;
  if ($file_extension) {
    $forced_file_extension = $file_extension;
  }

  return $forced_file_extension;
}

/**
 * Get theme-engine file-extension.
 */
function tcm_get_template_file_extension() {
  global $theme_engine;
  $ext = tcm_force_template_file_extension();
  if (!$ext) {
    $fn = $theme_engine . '_extension';
    if (function_exists($fn)) {
      $ext = $fn();
    }
  }
  if (!$ext) {
    $ext = '.tpl.php';
  }

  return $ext;
}


