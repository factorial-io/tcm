<?php
/**
 * @file
 * the public api for the theme-component-manager
 */


/**
 * Base class for a component.
 */
class ComponentBase extends StdClass {
  protected $name;
  protected $folder;
  protected $scripts = array();
  protected $styles = array();
  protected $template = NULL;
  protected $arguments = array();

  /**
   * Constructor.
   */
  public function __construct($folder, $data) {
    $this->name = $data->name;
    $this->folder = $folder;
    $this->scripts = isset($data->scripts) ? $data->scripts : array();
    $this->styles = isset($data->styles) ? $data->styles : array();
    $this->template = $data->backend->template;
    foreach ($data->backend->arguments as $key => $value) {
      if (is_object($value)) {
        $this->arguments[$key] = (array) $value;
      }
      else {
        $this->arguments[$key] = $value;
      }
    }
  }

  /**
   * Get the name of the component.
   */
  public function getName() {
    return $this->name;
  }

  /**
   * Attach component assets to page.
   */
  public function attachAssets() {
    $mapping = array('drupal_add_js' => $this->scripts, 'drupal_add_css' => $this->styles);
    foreach ($mapping as $func_name => $data) {
      foreach ($data as $script_name) {
        $func_name($this->folder . DIRECTORY_SEPARATOR . $script_name);
      }
    }
  }

  /**
   * Get arguments for this component.
   */
  public function getArguments($arguments) {
    return drupal_array_merge_deep($this->arguments, $arguments);
  }

  public function getDefaultArguments() {
    return $this->arguments;
  }

  public function getTemplate() {
    $pos = strpos($this->template, '.');
    return substr($this->template, 0, $pos);
  }

  public function getFolder() {
    return $this->folder;
  }



}


/**
 * Implementation of hook_theme().
 */
function tcm_register_theme_functions($existing, $type, $theme, $path) {

  $components = tcm_get_components();
  $result = array();
  if (!$components) {
    return array();
  }

  foreach ($components as $component) {
    $result['component_' . $component->getName()] = array(
      'variables' => array('component' => NULL, 'arguments' => $component->getDefaultArguments()),
      'path' => $component->getFolder(),
      'template' => $component->getTemplate(),
      'preprocess functions' => array('tcm_preprocess_component')
    );
  }
  dsm($result);
  return $result;
}


/**
 * Find all components and register them.
 */
function _tcm_register_components($path_to_theme) {
  $components = array();

  $dir = $path_to_theme . '/components';

  if (!is_dir($dir)) {
    return FALSE;
  }

  if ($handle = opendir($dir)) {
    while (FALSE !== ($file = readdir($handle))) {
      if ($file == '.' || $file == '..') {
        continue;
      }
      $file = $dir . DIRECTORY_SEPARATOR . $file;
      if (is_dir($file)) {
        if ($component = tcm_read_component($file)) {
          $components[$component->getName()] = $component;
        }
        else {
          dsm("Could not read component from " . $file);
        }
      }
    }
    closedir($handle);
  }

  return $components;
}



function tcm_register_components($path_to_theme) {
  static $components = NULL;
  if (!is_null($components)) {
    return $components;
  }

  $cache_id = 'tcm:components:' . $path_to_theme;
  if (!variable_get('devel_rebuild_theme_registry', FALSE) && $data = cache_get($cache_id)) {
    $components = $data->data;
    dsm("get from cache");
  }
  else {
    $components = _tcm_register_components($path_to_theme);
    cache_set($cache_id, $components);
    dsm("get from file-system");
  }

  return $components;
}


/**
 * Get all registered components.
 */
function tcm_get_components($path_to_theme = NULL) {
  return tcm_register_components(isset($path_to_theme) ? $path_to_theme : path_to_theme());
}


/**
 * Read a component.
 */
function tcm_read_component($directory_path) {
  $filename = $directory_path . '/component.json';
  if (!file_exists($filename)) {
    return FALSE;
  }
  $content = file_get_contents($filename);
  $data = json_decode($content);
  if (!empty($data) && is_object($data)) {
    return new ComponentBase($directory_path, $data);
  }
  return FALSE;
}


/**
 * Return a themed component.
 */
function component($component_name, $arguments = array()) {

  $components = tcm_get_components();
  if (!isset($components[$component_name])) {
    drupal_set_message(t('Component not found %c', array('%c' => $component_name)));
    return FALSE;
  }

  $component = $components[$component_name];
  $component->attachAssets();

  return theme('component_' . $component_name, array('component' => $component, 'arguments' => $arguments));
}

/**
 * Implementation of hook_preprocess_tcm().
 */
function tcm_preprocess_component(&$variables) {
  $component = $variables['component'];
  $arguments = $component->getArguments($variables['arguments']);
  dsm($arguments);
  $variables = drupal_array_merge_deep($variables, $arguments);

}
